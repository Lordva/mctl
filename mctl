#!/bin/bash

# colors

RESET="\033[0m"         # Normal color
RED="\033[0;31m"        # Errors
GREEN="\033[0;32m"      # Sucess
BOLD="\033[1;01m"       # BOLD


MINECRAFT_START_COMMAND="/usr/bin/java -Xms2G -Xmx8G -jar ${SERVER_FILE} nogui"
ISHARD=false

# The server's base directory without the ending /
SERVER_PATH="/srv/mc"

# The linux user running the server
SERVER_USER="minecraft"
SERVER_GROUP="minecraft"

#the name of the server file, could be forge.jar or spigot.jar, usualy it should be server.jar
SERVER_FILE="server.jar"

#wip
SHELL_PID=$$
PID_FILE="/tmp/mctl_pid"

TMUX_SESSION_NAME="minecraft"
TMUX_SOCKET_PATH="/tmp/console_socket"

progress-bar() {
  local duration=${1}
    already_done() { for ((done=0; done<$elapsed; done++)); do printf "▇"; done }
    remaining() { for ((remain=$elapsed; remain<$duration; remain++)); do printf " "; done }
    percentage() { printf "| %s%%" $(( (($elapsed)*100)/($duration)*100/100 )); }
    clean_line() { printf "\r"; }
  for (( elapsed=1; elapsed<=$duration; elapsed++ )); do
      already_done; remaining; percentage
      sleep 1
      clean_line
  done
  clean_line
}

check_if_running(){
  if tmux -S $TMUX_SOCKET_PATH ls | grep $TMUX_SESSION_NAME > /dev/null 2>&1; then
    return 0
  else
    return 1
  fi
}

function start(){
  if check_if_running; then
    echo -e "[ ${RED}✕${RESET} ] tmux session is already running"
    echo -e "check that the session is not running empty with : tmux -S ${TMUX_SOCKET_PATH} a -t ${TMUX_SESSION_NAME}"
    exit 1
  fi
  sudo runuser -l minecraft -c "tmux -S /tmp/console_socket new -s minecraft -d 'bash /srv/mc/start.sh'" 
  exit 0
}

function stop(){
  if ! tmux -S $TMUX_SOCKET_PATH ls | grep $TMUX_SESSION_NAME > /dev/null 2>&1; then
    echo -e "[ ${RED}✕${RESET} ] cannot stop server, server is offline"
    exit 1
  fi
  if [ $ISHARD == false ]; then
    tmux -S $TMUX_SOCKET_PATH send-keys -t $TMUX_SESSION_NAME 'say Arret du serveur dans 30 secondes' Enter
    echo -e "[LOG] sleeping for 30s..."
    progress-bar 30
    echo -e "[ ${GREEN}✔${RESET} ] - done"
  fi
  tmux -S $TMUX_SOCKET_PATH send-keys -t $TMUX_SESSION_NAME 'say Arret du serveur !' Enter
  sleep 3
  tmux -S $TMUX_SOCKET_PATH send-keys -t $TMUX_SESSION_NAME 'stop' Enter
  tmux -S $TMUX_SOCKET_PATH kill-session -t $TMUX_SESSION_NAME
  exit 0
}

function console(){
  if ! check_if_running; then
    echo -e "[ ${RED}✕${RESET} ] server is not running"
    exit 1
  fi
  user_input(){
    read -p -r "> " input
    case $input in
      exit | quit | stop ) exit 0 ;;
      * ) tmux -S $TMUX_SOCKET_PATH send-keys -t $TMUX_SESSION_NAME "${input}" Enter
    esac
  }
  trap user_input SIGINT
  tail -f "$SERVER_PATH/logs/latest.log"
  exit 0
}

function status(){
  if check_if_running; then
    echo -e "[ ${GREEN}✔${RESET} ] - Server is online"
    echo
    echo -e "  Server latest logs: "
    tmux -S $TMUX_SOCKET_PATH capture-pane -pt $TMUX_SESSION_NAME -A 5
  else
    echo -e "[ ${RED}✕${RESET} ] - Server is offline"
    echo -e "  Server latest logs: "
    tail -n 5 $SERVER_PATH/logs/latest.log  
  fi
  exit 0
}

function restart(){
  stop
  start
  exit 0
}

function help(){
  echo -e "${BOLD}usage${RESET}: mctl [option] <command>"
  echo -e ""
  echo -e "${BOLD}commands:${RESET}"
  echo -e "mctl start                   start the minecraft server"
  echo -e "mctl stop                    stop the minecraft server"
  echo -e "mctl status                  display the status for the minecraft server"
  echo -e "mctl restart                 restart the minecraft server"
  echo -e "mctl console                 display the server console"
  echo
  echo -e "${BOLD}options:${RESET} "
  echo -e "mctl -s --send               send command to console without opening it"
  echo -e "mctl -h, --help              display this message"
  echo -e "mctl -f --force              force the event execution without prior warning"
  exit 1
}

function version(){
  echo -e "mctl 0.1.2"
  exit 0
}

if [ $# -gt 2 ]; then
  echo -e "[ ${RED}✕${RESET} ] too many arguments."
  help
fi

for i in "$@"; do case $i in
  start ) start ;;
  stop ) stop ;;
  restart ) restart ;;
  status ) status ;;
  console ) console ;;
  -h | --help ) help ;;
  -f | --force ) ISHARD=true ;;
  * ) echo -e "[ ${RED}✕${RESET} ] Invalid argument" && help ;;
esac
done

echo -e "[ ${RED}✕${RESET} ] program require a command"
help

