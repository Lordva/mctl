#!/bin/bash

### TODO:
# - debug multiserver support
# - check si il peut y avoir des conflits entre servers
# - ecrire un verificateur de config (dossier ./utils?)
# - coupler avec mcserver-installer ?
# - ajouter licence
# - finir readme et doc
# - list command



BASE_DIR=/opt/mctl

source ${BASE_DIR}/mctl.conf
# colors

RESET="\033[0m"         # Normal color
RED="\033[0;31m"        # Errors
GREEN="\033[0;32m"      # Sucess
BOLD="\033[1;01m"       # BOLD

ISHARD=false # check if the -f flag is used

# display a progress bar for long duration command
progress-bar() {
  local duration=${1}
    already_done() { for ((done=0; done<$elapsed; done++)); do printf "▇"; done }
    remaining() { for ((remain=$elapsed; remain<$duration; remain++)); do printf " "; done }
    percentage() { printf "| %s%%" $(( (($elapsed)*100)/($duration)*100/100 )); }
    clean_line() { printf "\r"; }
  for (( elapsed=1; elapsed<=$duration; elapsed++ )); do
      already_done; remaining; percentage
      sleep 1
      clean_line
  done
  clean_line
}

# check for a specific server and load its config
get_server(){
  if [ -z $1 ]; then
    echo -e "[${RED}✕${RESET}] Command require an argument"
    short_help
  fi
  for i in $SERVER_LIST_DIRECTORY/*; do
    if grep -w "SERVER_NAME=$1" $i 2>&1 > /dev/null; then
      source $i
      SERVER_FILE_NAME=$i
      success=0
      break
    else
      success=1
    fi
  done
  case $success in
    0 ) echo -e "[LOG] success, found server named $1" ;;
    1 ) echo -e "[${RED}✕${RESET}] Could not find a server named $1"
        echo -e "    Check if the 'SERVER_NAME' field is correctly setup in the server's config file"
        exit 1 ;;
    * ) echo -e "[${RED}✕${RESET}] Unexpected error when seaching for server"
  esac
}

#Check if Tmux session is running (does not say if the server itself is running, just the tmux session)
check_if_running(){
  if tmux -S $TMUX_SOCKET_PATH ls | grep $TMUX_SESSION_NAME > /dev/null 2>&1; then
    return 0
  else
    return 1
  fi
}

#Start Tmux session and minecraft server
function start(){
  get_server $1
  if check_if_running; then
    echo -e "[${RED}✕${RESET}] tmux session is already running"
    echo -e "check that the session is not running empty with : tmux -S ${TMUX_SOCKET_PATH} a -t ${TMUX_SESSION_NAME}"
    exit 1
  fi
  if ! sudo runuser -l $MINECRAFT_USER -c "tmux -S $TMUX_SOCKET_PATH new -s $TMUX_SESSION_NAME -d '$SERVER_START_COMMAND'"; then
    echo -e >&2 "[${RED}✕${RESET}] Failed to start tmux session on socket $TMUX_SOCKET_PATH with user $MINECRAFT_USER running command: $SERVER_START_COMMAND"
    exit 1
  fi
  exit 0
}

# Stop minecraft server and Tmux session
function stop(){
  get_server $1
  if ! tmux -S $TMUX_SOCKET_PATH ls | grep $TMUX_SESSION_NAME > /dev/null 2>&1; then
    echo -e "[${RED}✕${RESET}] cannot stop server, server is offline"
    exit 1
  fi
  # Stop server with a 30s countdown
  if [ $ISHARD == false ]; then
    tmux -S $TMUX_SOCKET_PATH send-keys -t $TMUX_SESSION_NAME 'say Arret du serveur dans 30 secondes' Enter
    echo -e "[LOG] sleeping for 30s..."
    progress-bar 30
    echo -e "[ ${GREEN}✔${RESET} ] - done"
  fi
  tmux -S $TMUX_SOCKET_PATH send-keys -t $TMUX_SESSION_NAME 'say Arret du serveur !' Enter
  sleep 3
  tmux -S $TMUX_SOCKET_PATH send-keys -t $TMUX_SESSION_NAME 'stop' Enter
  tmux -S $TMUX_SOCKET_PATH kill-session -t $TMUX_SESSION_NAME
  exit 0
}

# Get user access to console [WIP]
function console(){
  get_server $1
  if ! check_if_running; then
    echo -e "[${RED}✕${RESET}] server is not running"
    exit 1
  fi

  user_input(){
    read -r -p "> " input
    case $input in
      exit | quit | stop ) exit 0 ;;
      help | h ) echo -e "type exit to quit the console" ;;
      * ) tmux -S $TMUX_SOCKET_PATH send-keys -t $TMUX_SESSION_NAME "${input}" Enter && tail -f $SERVER_PATH/logs/latest.log
    esac
  }
  trap user_input SIGINT
  tail -f "$SERVER_PATH/logs/latest.log"
  exit 0
}

# Get Tmux session status and latest logs
function status(){
  get_server $1
  if check_if_running; then
    echo -e "[ ${GREEN}✔${RESET} ] - Server is online"
    echo
    echo -e "  Server latest logs: "
    tmux -S $TMUX_SOCKET_PATH capture-pane -pt $TMUX_SESSION_NAME -S -5
  else
    echo -e "[${RED}✕${RESET}] - Server is offline"
    echo -e "  Server latest logs: "
    tail -n 5 $SERVER_PATH/logs/latest.log
  fi
  exit 0
}

# Restart the server
function restart(){
  stop $1
  start $1
  exit 0
}

# Edit the config file for a server
function edit(){
  get_server $1
  if [ -z ${CONFIG_EDITOR} ]; then
    echo -e >&2 "[${RED}✕${RESET}] the CONFIG_EDITOR parameter must be set in mctl.conf"
    exit 1
  fi
  if ! ${CONFIG_EDITOR} $SERVER_FILE_NAME; then
    echo -e >&2 "[${RED}✕${RESET}] Something went wrong when trying to open ${SERVER_FILE_NAME} with ${CONFIG_EDITOR} \n Do you have the right permissions ?"
    exit 1
  fi
  exit 0
  }

# List all configs
  function list(){
    echo "Found those configs in ${SERVER_LIST_DIRECTORY}:"
    for i in $SERVER_LIST_DIRECTORY/*; do
      echo ${i:18}
    done
    exit 0
  }

# Display help message
function help(){
  echo -e "${BOLD}usage${RESET}: mctl [option] <command> <server name>"
  echo -e ""
  echo -e "${BOLD}commands:${RESET}"
  echo -e "mctl start   <server name>             start the minecraft server"
  echo -e "mctl stop    <server name>             stop the minecraft server"
  echo -e "mctl status  <server name>             display the status for the minecraft server"
  echo -e "mctl restart <server name>             restart the minecraft server"
  echo -e "mctl console <server name>             display the server console"
  echo -e "mctl edit    <server name>             edit the mctl config file for a specific server"
  echo
  echo -e "${BOLD}options:${RESET} "
  echo -e "mctl -s --send               send command to console without opening it"
  echo -e "mctl -h, --help              display this message"
  echo -e "mctl -f --force              force the event execution without prior warning"
  echo
  echo "mctl is a tool that handle a minecraft server execution, you can start, stop and restart a server as well as display the server's status, send commands to the console and more."
  echo
  echo -e "${BOLD}Exemple${RESET}:"
  echo -e "     mctl stop -f survival                   stop the server named survival without waiting the 30s"
  echo -e "     mctl console survival                   display the survival console"
  echo
  echo -e "The source code is available at https://github.com/Lordva/mctl"
  exit 1
}

function short_help() {
  echo -e "${BOLD}usage${RESET}: mctl [option] <command> <server name>"
  echo -e "use mctl --help to display the full help message"
  exit 1
}

function version(){
  echo -e "mctl 1.0.1"
  exit 0
}

# loop through all the args
for (( i=1; 1<=$#; i++ )); do
  next=$((i+1)) # the next argument (name of the server)
  case ${!i} in
    start ) start ${!next} ;;
    stop ) stop ${!next} ;;
    restart ) restart ${!next} ;;
    status ) status ${!next} ;;
    console ) console ${!next} ;;
    edit ) edit ${!next} ;;
    list ) list ;;
    --help ) help ;;
    -h ) short_help ;;
    -f | --force ) ISHARD=true ;;
    * ) echo -e "[${RED}✕${RESET}] Invalid argument" && short_help ;;
esac
done

echo -e "[${RED}✕${RESET}] program require a command"
short_help
